package de.ostfale.kotlin.json.kotlinx.serializer

import kotlinx.serialization.*
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.json.Json

// https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#introduction-to-serializers

@Serializable
class ColorSer(val rgb: Int)

@Serializable
@SerialName("Box")
class BoxSer<T>(val contents: T)

@OptIn(ExperimentalSerializationApi::class)
fun main() {
    val green = ColorSer(0x00ff00)
    println("Encoded: ${Json.encodeToString(green)}")
    showPluginGeneratedSerializer()
    showGenericPluginGeneratedSerializer()
    showCollectionSerializer()
}

// https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#constructing-collection-serializers
private fun showCollectionSerializer() {
    val stringListSerializer: KSerializer<List<String>> = ListSerializer(String.serializer())
    println("\nExplicit Collection Serializer Descriptor: ${stringListSerializer.descriptor}")
}

/**
 * Every class marked with the @Serializable annotation, like the Color class from the previous example, gets an
 * instance of the KSerializer interface automatically generated by the Kotlin Serialization compiler plugin.
 * We can retrieve this instance using the .serializer() function on the class's companion object.
 */
private fun showPluginGeneratedSerializer() {
    val colorSerializer: KSerializer<ColorSer> = ColorSer.serializer()
    println("\n Show KSerializer: ${colorSerializer.descriptor}")
}

private fun showGenericPluginGeneratedSerializer() {
    val boxedColorSerializer = BoxSer.serializer(ColorSer.serializer())
    println("\n Show generic ${boxedColorSerializer.descriptor}")
}